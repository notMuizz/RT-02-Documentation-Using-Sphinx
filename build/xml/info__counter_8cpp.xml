<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="info__counter_8cpp" kind="file" language="C++">
    <compoundname>info_counter.cpp</compoundname>
    <includes local="yes">ros/ros.h</includes>
    <includes local="yes">robot_r/Counter.h</includes>
    <includes local="yes">assignment_2_2022/PlanningActionResult.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="3">
        <label>robot_r/Counter.h</label>
      </node>
      <node id="1">
        <label>/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp</label>
        <link refid="info__counter_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assignment_2_2022/PlanningActionResult.h</label>
      </node>
      <node id="2">
        <label>ros/ros.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="info__counter_8cpp_1a6e4ce36e622eb01432e2c50dc59d0c27" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int counter_reach</definition>
        <argsstring></argsstring>
        <name>counter_reach</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="28" column="5" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="info__counter_8cpp_1af20186488c086573476471d4b4399e8e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int counter_cancel</definition>
        <argsstring></argsstring>
        <name>counter_cancel</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="29" column="5" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="info__counter_8cpp_1a7d6f8a25e94209bd3ba29b2051ca4f08" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="30" column="5" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="info__counter_8cpp_1a258f1804016e36c51707502cb6e7f214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void callback</definition>
        <argsstring>(const assignment_2_2022::PlanningActionResult::ConstPtr &amp;msg)</argsstring>
        <name>callback</name>
        <param>
          <type>const assignment_2_2022::PlanningActionResult::ConstPtr &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Callback function for the /reaching_goal/result topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the received PlanningActionResult message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="36" column="6" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="36" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="info__counter_8cpp_1af7bf2ee215e420b854b54c0937362a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool call_count</definition>
        <argsstring>(robot_r::Counter::Request &amp;req, robot_r::Counter::Response &amp;res)</argsstring>
        <name>call_count</name>
        <param>
          <type>robot_r::Counter::Request &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>robot_r::Counter::Response &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Service callback function to set values of the /info_counter topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Request object for the Counter service. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Response object for the Counter service. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the service call was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="62" column="6" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="info__counter_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Main function for the info_counter node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of command-line arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of command-line arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer representing the exit status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" line="76" column="5" bodyfile="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp" bodystart="76" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Hafiz Muizz Ahmed Sethi </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>30/05/2023</para>
</simplesect>
Subscribes To: <linebreak/>
 /reaching_goal/result</para>
<para>Services To: <linebreak/>
 /info_counter</para>
<para>Description: This code is a ROS node that keeps track of the number of reached and canceled goals. It subscribes to the &quot;/reaching_goal/result&quot; topic to receive status messages and updates the counters accordingly. It also provides a service &quot;/info_counter&quot; to retrieve the current counts of reached and canceled goals. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="preprocessor">#include<sp/>&quot;ros/ros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;robot_r/Counter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;assignment_2_2022/PlanningActionResult.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Counter<sp/>to<sp/>count<sp/>the<sp/>number<sp/>of<sp/>reached<sp/>or<sp/>cancelled<sp/>targets<sp/>and<sp/>status<sp/>for<sp/>which<sp/>condition<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_reach<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_cancel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="info__counter_8cpp_1a258f1804016e36c51707502cb6e7f214" kindref="member">callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>assignment_2_2022::PlanningActionResult::ConstPtr&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;I<sp/>heard:<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>msg-&gt;status.status);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>stat<sp/>=<sp/>msg-&gt;status.status;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_cancel++;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_reach++;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Goal<sp/>Reached!:<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>counter_reach);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Goal<sp/>Canceled!:<sp/>[%d]&quot;</highlight><highlight class="normal">,<sp/>counter_cancel);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="info__counter_8cpp_1af7bf2ee215e420b854b54c0937362a01" kindref="member">call_count</ref>(robot_r::Counter::Request<sp/>&amp;req,<sp/>robot_r::Counter::Response<sp/>&amp;res)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>res.num_reached<sp/>=<sp/>counter_reach;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>res.num_cancelled<sp/>=<sp/>counter_cancel;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="info__counter_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;info_counter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subscriber<sp/>to<sp/>/reaching_goal/result<sp/>for<sp/>the<sp/>status<sp/>of<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::Subscriber<sp/>sub<sp/>=<sp/>n.subscribe(</highlight><highlight class="stringliteral">&quot;/reaching_goal/result&quot;</highlight><highlight class="normal">,<sp/>1,<sp/><ref refid="info__counter_8cpp_1a258f1804016e36c51707502cb6e7f214" kindref="member">callback</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Service<sp/>to<sp/>/info_counter<sp/>to<sp/>set<sp/>values<sp/>on<sp/>service</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::ServiceServer<sp/>service<sp/>=<sp/>n.advertiseService(</highlight><highlight class="stringliteral">&quot;/info_counter&quot;</highlight><highlight class="normal">,<sp/><ref refid="info__counter_8cpp_1af7bf2ee215e420b854b54c0937362a01" kindref="member">call_count</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/muizz/RT_Assign_02-main/robot_r/src/info_counter.cpp"/>
  </compounddef>
</doxygen>
